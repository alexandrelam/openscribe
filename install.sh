#!/bin/bash

# Vibe Speech-to-Text Global Installation Script
# This script installs the vibe command globally so you can run it from anywhere

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
COMMAND_NAME="vibe"
CLI_COMMAND_NAME="vibe-cli"
INSTALL_DIR="$HOME/.local/bin"

# Helper functions
print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

print_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

print_header() {
    echo -e "${BLUE}"
    echo "╔══════════════════════════════════════════════════════════════╗"
    echo "║                  Vibe Speech-to-Text Installer               ║"
    echo "║             Install globally accessible 'vibe' command      ║"
    echo "╚══════════════════════════════════════════════════════════════╝"
    echo -e "${NC}"
}

# Get absolute path to project directory
get_project_dir() {
    # Get the directory where this script is located
    local script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
    echo "$script_dir"
}

# Validate project structure
validate_project() {
    local project_dir="$1"
    
    print_info "Validating project structure..."
    
    # Check required files
    local required_files=(
        "main.py"
        "main_cli.py"
        "requirements.txt"
        "venv/bin/activate"
        "src/gui.py"
        "src/transcription.py"
    )
    
    for file in "${required_files[@]}"; do
        if [[ ! -f "$project_dir/$file" ]]; then
            print_error "Required file not found: $file"
            return 1
        fi
    done
    
    # Check if virtual environment is set up
    if [[ ! -d "$project_dir/venv" ]]; then
        print_error "Virtual environment not found. Please run: python -m venv venv && source venv/bin/activate && pip install -r requirements.txt"
        return 1
    fi
    
    # Test virtual environment
    if ! source "$project_dir/venv/bin/activate" && python -c "import src.gui" 2>/dev/null; then
        print_error "Virtual environment is not properly set up or dependencies are missing"
        return 1
    fi
    
    print_success "Project structure is valid"
    return 0
}

# Create launcher script
create_launcher() {
    local project_dir="$1"
    local launcher_path="$2"
    
    print_info "Creating launcher script..."
    
    cat > "$launcher_path" << EOF
#!/bin/bash

# Vibe Speech-to-Text Launcher
# Generated by install.sh on $(date)

# Project directory (absolute path)
PROJECT_DIR="$project_dir"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Helper functions
print_error() {
    echo -e "\${RED}❌ \$1\${NC}" >&2
}

print_info() {
    echo -e "\${BLUE}ℹ️  \$1\${NC}"
}

show_help() {
    echo "Vibe Speech-to-Text - Voice transcription with VAD and multilingual support"
    echo ""
    echo "Usage:"
    echo "  vibe              Launch GUI interface (default)"
    echo "  vibe --cli        Launch CLI interface"
    echo "  vibe --help       Show this help message"
    echo ""
    echo "Features:"
    echo "  • Voice Activity Detection (VAD) for intelligent chunking"
    echo "  • Multilingual support (English, French, Spanish, German, etc.)"
    echo "  • Real-time clipboard-based text insertion"
    echo "  • Automatic language detection"
    echo "  • Configurable VAD parameters"
    echo ""
    echo "Configuration is stored in: \$PROJECT_DIR/config.json"
}

# Validate installation
validate_installation() {
    if [[ ! -d "\$PROJECT_DIR" ]]; then
        print_error "Project directory not found: \$PROJECT_DIR"
        print_error "The installation may have been moved or deleted."
        print_error "Please run the install script again."
        exit 1
    fi
    
    if [[ ! -f "\$PROJECT_DIR/venv/bin/activate" ]]; then
        print_error "Virtual environment not found: \$PROJECT_DIR/venv"
        print_error "Please reinstall by running the install script."
        exit 1
    fi
    
    if [[ ! -f "\$PROJECT_DIR/main.py" ]] && [[ ! -f "\$PROJECT_DIR/main_cli.py" ]]; then
        print_error "Main scripts not found in \$PROJECT_DIR"
        print_error "Please reinstall by running the install script."
        exit 1
    fi
}

# Main launcher logic
main() {
    # Parse command line arguments
    local mode="gui"
    
    case "\$1" in
        --help|-h)
            show_help
            exit 0
            ;;
        --cli)
            mode="cli"
            shift  # Remove --cli from arguments
            ;;
        --version|-v)
            echo "Vibe Speech-to-Text v1.0"
            echo "Advanced speech transcription with VAD and multilingual support"
            exit 0
            ;;
        --*)
            print_error "Unknown option: \$1"
            echo "Use 'vibe --help' for usage information."
            exit 1
            ;;
    esac
    
    # Validate installation
    validate_installation
    
    # Change to project directory
    cd "\$PROJECT_DIR" || {
        print_error "Cannot change to project directory: \$PROJECT_DIR"
        exit 1
    }
    
    # Activate virtual environment
    source "venv/bin/activate" || {
        print_error "Cannot activate virtual environment"
        exit 1
    }
    
    # Launch appropriate mode
    case "\$mode" in
        gui)
            print_info "Launching Vibe GUI..."
            # Run GUI in background and detach from terminal
            python main.py "\$@" &
            disown
            ;;
        cli)
            print_info "Launching Vibe CLI..."
            python main_cli.py "\$@"
            ;;
    esac
}

# Run main function with all arguments
main "\$@"
EOF

    chmod +x "$launcher_path"
    print_success "Launcher script created at $launcher_path"
}

# Install to system
install_to_system() {
    local project_dir="$1"
    
    print_info "Installing to system..."
    
    # Create install directory if it doesn't exist
    mkdir -p "$INSTALL_DIR"
    
    # Create main launcher
    local launcher_path="$INSTALL_DIR/$COMMAND_NAME"
    create_launcher "$project_dir" "$launcher_path"
    
    # Create CLI symlink
    local cli_launcher_path="$INSTALL_DIR/$CLI_COMMAND_NAME"
    ln -sf "$launcher_path" "$cli_launcher_path"
    
    print_success "Installed $COMMAND_NAME to $INSTALL_DIR"
    print_success "Created $CLI_COMMAND_NAME symlink for direct CLI access"
}

# Verify installation
verify_installation() {
    print_info "Verifying installation..."
    
    # Check if command is in PATH
    if ! command -v "$COMMAND_NAME" &> /dev/null; then
        print_warning "$COMMAND_NAME not found in PATH"
        print_warning "Make sure $INSTALL_DIR is in your PATH"
        print_info "Add this to your ~/.bashrc or ~/.zshrc:"
        print_info "export PATH=\"\$HOME/.local/bin:\$PATH\""
        return 1
    fi
    
    # Test help command
    if "$COMMAND_NAME" --help &> /dev/null; then
        print_success "Installation verified successfully"
        return 0
    else
        print_error "Installation verification failed"
        return 1
    fi
}

# Show usage instructions
show_usage_instructions() {
    echo -e "${GREEN}"
    echo "╔══════════════════════════════════════════════════════════════╗"
    echo "║                    Installation Complete!                   ║"
    echo "╚══════════════════════════════════════════════════════════════╝"
    echo -e "${NC}"
    
    echo "🎉 Vibe is now installed globally!"
    echo ""
    echo "Usage:"
    echo "  ${BLUE}vibe${NC}              Launch GUI interface"
    echo "  ${BLUE}vibe --cli${NC}        Launch CLI interface" 
    echo "  ${BLUE}vibe-cli${NC}          Direct CLI access"
    echo "  ${BLUE}vibe --help${NC}       Show help information"
    echo ""
    echo "Features:"
    echo "  • 🎤 Voice Activity Detection (VAD) for smart chunking"
    echo "  • 🌍 Multilingual support (11+ languages)"
    echo "  • 📋 Clipboard-based text insertion"
    echo "  • ⚡ Real-time transcription"
    echo "  • ⚙️  Configurable settings GUI"
    echo ""
    echo "To uninstall: run ${BLUE}./uninstall.sh${NC} from the project directory"
}

# Main installation function
main() {
    print_header
    
    # Get project directory
    local project_dir
    project_dir="$(get_project_dir)"
    print_info "Project directory: $project_dir"
    
    # Validate project structure
    if ! validate_project "$project_dir"; then
        print_error "Project validation failed"
        exit 1
    fi
    
    # Check if already installed
    if command -v "$COMMAND_NAME" &> /dev/null; then
        print_warning "$COMMAND_NAME is already installed"
        read -p "Do you want to reinstall? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            print_info "Installation cancelled"
            exit 0
        fi
    fi
    
    # Install to system
    if ! install_to_system "$project_dir"; then
        print_error "Installation failed"
        exit 1
    fi
    
    # Verify installation
    if verify_installation; then
        show_usage_instructions
    else
        print_warning "Installation completed but verification failed"
        print_info "You may need to restart your terminal or add ~/.local/bin to your PATH"
    fi
}

# Run main function
main "$@"